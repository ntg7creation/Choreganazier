{"version":3,"file":"TaskWindow-CrTsmr5C.js","sources":["../../node_modules/@mui/system/esm/styled.js","../../node_modules/@mui/material/Table/Tablelvl2Context.js","../../node_modules/@mui/material/TableRow/tableRowClasses.js","../../node_modules/@mui/material/TableRow/TableRow.js","../../src/Mui/TableCLicker.jsx","../../src/Menus/TaskWindow.jsx"],"sourcesContent":["import createStyled from './createStyled';\nconst styled = createStyled();\nexport default styled;","import * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst Tablelvl2Context = /*#__PURE__*/React.createContext();\nif (process.env.NODE_ENV !== 'production') {\n  Tablelvl2Context.displayName = 'Tablelvl2Context';\n}\nexport default Tablelvl2Context;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableRowUtilityClass(slot) {\n  return generateUtilityClass('MuiTableRow', slot);\n}\nconst tableRowClasses = generateUtilityClasses('MuiTableRow', ['root', 'selected', 'hover', 'head', 'footer']);\nexport default tableRowClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\", \"hover\", \"selected\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport tableRowClasses, { getTableRowUtilityClass } from './tableRowClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    selected,\n    hover,\n    head,\n    footer\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', hover && 'hover', head && 'head', footer && 'footer']\n  };\n  return composeClasses(slots, getTableRowUtilityClass, classes);\n};\nconst TableRowRoot = styled('tr', {\n  name: 'MuiTableRow',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.head && styles.head, ownerState.footer && styles.footer];\n  }\n})(({\n  theme\n}) => ({\n  color: 'inherit',\n  display: 'table-row',\n  verticalAlign: 'middle',\n  // We disable the focus ring for mouse, touch and keyboard users.\n  outline: 0,\n  [`&.${tableRowClasses.hover}:hover`]: {\n    backgroundColor: (theme.vars || theme).palette.action.hover\n  },\n  [`&.${tableRowClasses.selected}`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    '&:hover': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)\n    }\n  }\n}));\nconst defaultComponent = 'tr';\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n */\nconst TableRow = /*#__PURE__*/React.forwardRef(function TableRow(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableRow'\n  });\n  const {\n      className,\n      component = defaultComponent,\n      hover = false,\n      selected = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const tablelvl2 = React.useContext(Tablelvl2Context);\n  const ownerState = _extends({}, props, {\n    component,\n    hover,\n    selected,\n    head: tablelvl2 && tablelvl2.variant === 'head',\n    footer: tablelvl2 && tablelvl2.variant === 'footer'\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableRowRoot, _extends({\n    as: component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    role: component === defaultComponent ? null : 'row',\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableRow.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Should be valid `<tr>` children such as `TableCell`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the table row will shade on hover.\n   * @default false\n   */\n  hover: PropTypes.bool,\n  /**\n   * If `true`, the table row will have the selected shading.\n   * @default false\n   */\n  selected: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableRow;","import React from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Avatar } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:hover': {\r\n        backgroundColor: '#f5f5f5',\r\n        cursor: 'pointer'\r\n    }\r\n}));\r\n\r\nconst employees = [\r\n    { id: 1, name: 'John Doe', avatarUrl: '/path/to/avatar1.jpg', jobDescription: 'Designing the main interface' },\r\n    { id: 2, name: 'Jane Smith', avatarUrl: '/path/to/avatar2.jpg', jobDescription: 'Implementing the backend' }\r\n];\r\n\r\n\r\n\r\n\r\nconst EmployeeTable = () => {\r\n    const handleClick = () => {\r\n        console.log('click');\r\n    };\r\n\r\n    return (\r\n\r\n        <TableContainer component={Paper}\r\n            style={{\r\n                width: '400px',\r\n                height: '200px',\r\n                // transform: 'scale(0.8)',\r\n                transformOrigin: 'top left',\r\n            }}>\r\n\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Employee</TableCell>\r\n                        <TableCell>Job Description</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {employees.map((employee) => (\r\n                        <StyledTableRow key={employee.id} onClick={handleClick}>\r\n                            <TableCell component=\"th\" scope=\"row\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                                <Avatar alt={employee.name} src={employee.avatarUrl} sx={{ mr: 1 }} />\r\n                                {employee.name}\r\n                            </TableCell>\r\n                            <TableCell>{employee.jobDescription}</TableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                    {Array.from(Array(4 - employees.length).keys()).map((_, index) => (\r\n                        <StyledTableRow key={`empty-${index}`} onClick={handleClick}>\r\n                            <TableCell component=\"th\" scope=\"row\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                                <Avatar sx={{ mr: 1 }} />\r\n                                Empty Slot\r\n                            </TableCell>\r\n                            <TableCell>Click to assign yourself</TableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default EmployeeTable;\r\n","import { useEffect, useState } from 'react';\r\nimport EmployeeTable from \"../Mui/TableCLicker.jsx\"\r\n\r\nimport { Paper, Typography, Divider, Box } from '@mui/material';\r\nimport { headerStyle, dataStyle, BoxStyle, paragraphStyle } from \"../Styles.jsx\";\r\nimport Background from 'three/examples/jsm/renderers/common/Background.js';\r\nimport { assignToTask, unassignFromTask } from \"../DataCom/fireBaseFunctionalActions.js\"\r\n\r\n\r\n\r\nconst emptydata = {\r\n    id: undefined,\r\n    Job_Title: 'Empty Slot',\r\n    name: 'this slot is empty click to add a new note',\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst loadingTaskInstance = {\r\n    id: \"PuUS1minRnyynrAFnZiJ\",\r\n    name: \"loading...\",\r\n    Job_Title: \"loading...\",\r\n    NumberOfSlots: 1,\r\n    EstimatedTimeToComplete: 0,\r\n    Description: \"loading...\",\r\n    Type: \"loading...\",\r\n    requiredAccessLevel: 0,\r\n    Location: { \"latitude\": 0, \"longitude\": 0 },\r\n    AssignedCrew: [\"tempID\"],\r\n    AssignedCrewName: [\"tempName\"],\r\n    Date: {\r\n        nanoseconds: 0,\r\n        seconds: 0\r\n    }\r\n}\r\n\r\nconst NoteComponent = ({ maxWidth, maxHeight, AssigendCrew = emptydata, Name = undefined, onClick = () => { } }) => {\r\n\r\n    return (\r\n        <Paper elevation={3}\r\n            sx={{\r\n                padding: 2,\r\n                margin: '16px 0',\r\n                maxWidth: maxWidth,\r\n                maxHeight: maxHeight,\r\n                backgroundColor: 'rgba(255, 255, 255, 0.7)',\r\n                transition: 'background-color 0.3s',\r\n                '&:hover': {\r\n                    backgroundColor: !(AssigendCrew.id) ? 'rgba(0, 255, 0, 0.9)' : 'rgba(255, 0, 0, 0.9)', // Adjust this value to set the hover color\r\n                },\r\n\r\n            }}\r\n            onClick={onClick}\r\n        >\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                {AssigendCrew.Job_Title}\r\n            </Typography>\r\n            <Divider style={{ margin: '6px 0' }} />\r\n            <Box>\r\n                <Typography variant=\"body1\">\r\n                    {Name ? Name : \"Empty Slot Click here to assign yourself to task\"}\r\n                </Typography>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default function TaskComponent(props) {\r\n    const taskInstance = props.taskInstance ? props.taskInstance : loadingTaskInstance;\r\n    // console.log(taskInstance)\r\n\r\n    const assigenSelf = (taskName, taskID) => {\r\n        //TODO deal with loading data\r\n        // console.log(taskName, taskID)\r\n        assignToTask(taskName, taskID)\r\n\r\n        //Loading...\r\n\r\n        // fetch new data...\r\n    }\r\n\r\n    const unAssgenSelf = (taskName, taskID) => {\r\n        //TODO deal with loading data\r\n        // console.log(taskID, taskName)\r\n        unassignFromTask(taskName, taskID)\r\n\r\n        //Loading...\r\n\r\n        // fetch new data...\r\n\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <h2\r\n                style={{\r\n                    position: 'absolute',\r\n                    right: '9%',\r\n                    top: '5%'\r\n                }}\r\n            >Task Type\r\n                {/* {props.tempstate} */}\r\n                <p style={paragraphStyle}>\r\n                    {taskInstance.Type}\r\n                </p>\r\n            </h2>\r\n            <h1\r\n                style={headerStyle}>Task Window\r\n\r\n            </h1>\r\n\r\n            <Box style={{\r\n                ...BoxStyle,\r\n                // backgroundColor: '#FF0000',\r\n                display: 'grid',\r\n                top: '5%',\r\n                height: '80%',\r\n            }} \r\n            >\r\n\r\n                <Box style={{\r\n                    ...BoxStyle,\r\n                    // backgroundColor: '#00FF00',\r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'auto auto',\r\n                }}>\r\n                    <h2 style={dataStyle}>\r\n                        Task Date: \r\n                        <p style={paragraphStyle}>\r\n                            {new Date(taskInstance.Date.seconds * 1000).toUTCString()}\r\n                        </p>\r\n                    </h2>\r\n                    <h2 style={dataStyle} >\r\n                        ETC:\r\n                        <p style={paragraphStyle}>\r\n                            {taskInstance.EstimatedTimeToComplete} Miniutes\r\n                        </p>\r\n                    </h2>\r\n                    <h3 style={dataStyle}>\r\n                        Task description\r\n                        <p style={paragraphStyle}>\r\n                            {taskInstance.Description}\r\n                        </p>\r\n                    </h3>\r\n\r\n                </Box>\r\n                <Box\r\n                    style={{\r\n                        ...BoxStyle,\r\n                        //  backgroundColor: '#FFFFFF',\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'auto auto auto',\r\n                        height: '80%',\r\n                    }}\r\n                >\r\n                    {Array(taskInstance.NumberOfSlots).fill(0).map((_, index) =>\r\n                        index < taskInstance.AssignedCrew.length ? \r\n                            < NoteComponent\r\n                                key={index}\r\n                                Name={taskInstance.AssignedCrewName[index]}\r\n                                AssigendCrew={{\r\n                                    id: 1,\r\n                                    Job_Title: 'Slot ' + (index + 1),\r\n                                    name: 'this slot is empty click to add a new note',\r\n                                }}\r\n                                onClick={() => unAssgenSelf(taskInstance.name, taskInstance.id)} \r\n                            />\r\n\r\n                            : <NoteComponent\r\n                                key={index}\r\n                                onClick={() => assigenSelf(taskInstance.name, taskInstance.id)}\r\n                            />\r\n\r\n\r\n                    )}\r\n\r\n                </Box>\r\n            </Box>\r\n\r\n        </>\r\n    )\r\n}\r\n"],"names":["styled","createStyled","Tablelvl2Context","getTableRowUtilityClass","slot","generateUtilityClass","tableRowClasses","generateUtilityClasses","_excluded","useUtilityClasses","ownerState","classes","selected","hover","head","footer","composeClasses","TableRowRoot","props","styles","theme","alpha","defaultComponent","TableRow","React.forwardRef","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","tablelvl2","React.useContext","_extends","_jsx","clsx","emptydata","loadingTaskInstance","NoteComponent","maxWidth","maxHeight","AssigendCrew","Name","onClick","jsxs","Paper","jsx","Typography","Divider","Box","TaskComponent","taskInstance","assigenSelf","taskName","taskID","assignToTask","unAssgenSelf","unassignFromTask","Fragment","paragraphStyle","headerStyle","BoxStyle","dataStyle","_","index"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}